The Life of a Component 

1. Bare Minimum :: 
var MyComponent   = React.createClass ({
   /* specs */
});

here specs must have a render () and other optional methods and properties 

var Component  = React.createClass ({
  render : function(){
   return React.DOM.span(null , " I am so customn ");
}
});

the render function must return a react component 

custom component : 
<html>
 <head>
 </head>
 <body>
   <div id = "app" >
      <span data-reactid = ".0"> I am so custom </span>
   </div>
   <script src = "react/build/react.js"></script>
   <script src = "react/build/react-dom.js"></script>
   <script>
           var Component = React.createClass ({
            render : function() {
              return React.DOM.span(null , "I am so customn" ) ;
              }
            });
            ReactDOM.render(
            React.createElement(Component),
            document.getElementById("app")
            );
            
     </script>
   </body>
 </html>
 
 
 
 
 
 ways to create an " instance " of your component 
 1. React.createElement()
 2. use factory 
 
 var ComponentFactory  = React.createFactory(Component);
 ReactDOM.render(
  ComponentFactory(),
  document.getElementById("app")
  );
  
  
  
Properties :

all properties available via , this.props 
var Component = React.createClass ({
 render : function(){
     return React.DOM.span ( null , "My name is " + this.props.name );
     }
     });
  ReactDOM.render (
   React.createElement(Component , {
    name : "Bob" ,
    }),
    document.getElementById("app")
    );
    
    
Properties are useful to carry on configration from parent components to children . 




using component properties : 

<html>
 <head>
 </head>
 <body>
   <div id = "app">
      <span data-reactid = ".0"><My name is Smriti </span>
   </div>
   <script src = "react /build /react.js" ></script>
   <script src = "react/build/react-dom.js"> < /script>
   <script>
           var Component =React.createClass({
            render : function(){
              return React.DOM.span( null , "My name is " + this.props.name );
              }
            });
            ReactDOM.render(
              React .createElement(Component , {
              name : "Bob"
              }),
              document.getElementById("app")
              );
     </script>
   </body>
 </html>
 
 
 
 
 propTypes :
  in compoenets can add property called propTypes to declare list of properties that your component accepts 
  var Component =React.createClass({
   propTypes : {
    name : React.PropTypes.string.isRequired,
  },
  render: function(){
    return React.DOM.span( null , "My name is "  + this.props.name );
    }
 });
 
using propTypes is optional , but 2 benefits :
1. declare openly what properties your component expect 
2. React does validation of property values at runtime ,


PropTypes. * Object.keys(React.PropTypes).join('\n');

* ===
array 
bool
func
number
object
string
any
arrayOf
element
instanceOf
node
objectOf
oneOf
oneOfType
shape



Default Property values :
 
 var text = 'text' in this.props ? this.props.text : ' ' ; 
 
 not doing this tedious job , of verifying valid input 
 
 car Component = React.createClass({
 propTypes : {
   firstName: React.PropTypes.string.isRequired ,
   middleName: React.PropTypes.string,
   familyName: React. PropTypes.string.isRequired ,
   address :React.PropTypes.string ,
   },
   
   getDefaultProps: function(){
    return {
    middleName: ' ' ,
    address: ' n/a',
    };
    
  },
  
   render : function(){
   }
   
  });
  
  
  so now 
  getDefaultProps() returns an object providing sane values for each optioanl property 
  
  
  
  STATE ::: 
  old school : was browser DOM manipulation and maintanance 
  
  state is the data the component uses to render itself , when the state changes the reac rebuilds the UI itself 
  
  UI updates 
  
  access the state via this.state 
  to update the state : 
   use this.setState()
   react calls render() method and update the UI 
   
  
  
Stateful Textarea component ::
calculates the number of character typed in 



STATELESS : uses props ! 

var TextAreaCounter = React.createClass({
 propTypes: { 
   text : React.PropTypes.string,
   },
   
   getDefaultProps: function(){
    return {
     text: ' ' ,
     };
    },
    
    render: function(){
      return React.DOM.div( null ,
      React.DOM.textarea({
        defaultValue : this.props.text,
        }),
        React.DOM.h3(null, this.props.text.length)
        );
       }
     });
     
     ReactDOM.render(
       React.createElement(TextAreaCounter , {
         text : "BoB",
         }),
         document.getElementById("app")
       );
       
to make this STATEFUL : uses state 
1. add getInitialState() : so you always work with some data 
getInitialState: function() {
  return {
    text : this.props.text ,
   };
  },
  
  
  initially in getInitialState() : will simoly copy the text property 
  
  later when data changes , component update its state using a helper method :
  
  _textChange: fuction (ev) {   // event listener : takes ev as object reaches in it to get the text of textarea input 
   this.setState({
    text : ev.target.value ,
    });
   },
  
  
  always update the state with this.setState() , takes an object and merges it with already existing data in this.state .
  
  now upating the render function : to use state 
  
  render : function(){
    return React.DOM.div( null ,
      React.DOM.textarea({
       value : this.state.text,
       onChange: this._textChange,
      }),
      React.DOM.h3(null , this.state.text.length)
    );
  }


DOM Events :::::

onChange: this._textChange 


event handling earlier !  ( teddious ) 


earlier all inline event handlers 
like : <button onclick = "doStuff" >
inefficient to have too many event listener like this 
also hard to have more than one listener on the same button 

hence , people in DOM world use : 
 element.addEventListener to set up listeners -> have code in 2 places or more 
 
 event delegation : 
  to address the performance issue : means u listen to events at some parent node , say <div> that has many buttons , and set up one listener for all buttons 
  
<div id = "parent">
  <button id = "ok" > OK </button>
  <button id = "cancel"> Cancel </button>
</div>

<script>
document.getElementById('parent').addEventListener('click',function(event){
  var button = event.target ;
  switch (button.id){
   case 'ok':
     console.log('OK!');
     break ;
   case 'cancel':
     console.log('Cancel');
     break ;
   default : 
     new Error('Unexpected button ID');
   };
});
</script>
 

 EVENT HANDLING IN REACT :
  rely  on : event.target in all browser 
  
  keeps the UI and the event listener together .
  
  -event.target
  -event.stopPropagation()
  -event.preventDefault()
  - event.onClick()
  - event.nativeEvent  // need the original browser event
  
  
  PROPS VS STATE : 
  properties are mechanism to configure your component
  state : internal data maintenacne 
  this.properties === arguments passed to class constructor 
  this.state === private properties 
  
  
  Accessing component from outside :
  
  react designed to work with any pre-existing codebase you might have . 
  1 . to have react app communicate with the outside world is to get a reference to a component you render 
  ReactDOM.render()
  
  var myTextAreaCounter = ReactDOM.render(
    React.createElement(TextAreaCounter , {
      defaultValue : "bob",
      }),
      document.getElementById("app")
      );
      
      
      to set a new state : 
      myTextAreaCounter.setState({text: "hello new me !"});
      
      reference to the main parent DOM , 
      var reactAppNode = ReactDOM.findDOMNode(myTextAreaCounter);
      reactAppNode.parentNode === document.getElementById('app');
      
      myTextAreaCounter.props;
      myTextAreaCounter.state ;
      
      changing Properties Mid-Flight : 
      
      rather than : myTextAreaCounter.setState({text : 'me'});
      
      use 
      
      componentWillReceiveProps : function(newProps){
       this.setState({
         text : newProps.defaultValue,
         });
        },
        
        this method recieves new props object and u can change the state accordingly 
        
        
 LIFECYCLE METHODS ::
 usr the lifecycle methods to listen to changes in your component 
 -componentWillUpdate()
 - componentWillReceiveProps()
 - componentDidUpdate()
 -  componentWillMount()
 - componentDidMount()
 - componentWillUnmount() 
 - shouldComponentUpdate(newProps ,newState) 
 
 
 
 
     
     
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
   
